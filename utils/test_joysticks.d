/*
 * Quick and dirty utility that prints information about the connected joysticks
 * and events generated by them.
 *
 * Compile and run by doing
 *    dmd -oftest_joysticks -I../src ../src/allegro5/*.d ../src/allegro5/internal/*.d -L-lallegro test_joysticks.d && ./test_joysticks
 *
 * What follows is the program output for some joysticks I tested it with.


 An original X-Box controller:

   Name = 'Microsoft X-Box 360 pad'
   Number of sticks = 4
      Stick 0 = 'Stick 1' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
      Stick 1 = 'Stick 2' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
      Stick 2 = 'Stick 3' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
      Stick 3 = 'Stick 4' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
   Number of buttons = 11
      Button 0 = 'B1'
      Button 1 = 'B2'
      Button 2 = 'B3'
      Button 3 = 'B4'
      Button 4 = 'B5'
      Button 5 = 'B6'
      Button 6 = 'B7'
      Button 7 = 'B8'
      Button 8 = 'B9'
      Button 9 = 'B10'
      Button 10 = 'B11'


 A "generic" (AKA fake) X-Box controller:

   Name = 'Generic X-Box pad'
   Number of sticks = 4
      Stick 0 = 'Stick 1' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
      Stick 1 = 'Stick 2' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
      Stick 2 = 'Stick 3' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
      Stick 3 = 'Stick 4' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
   Number of buttons = 11
      Button 0 = 'B1'
      Button 1 = 'B2'
      Button 2 = 'B3'
      Button 3 = 'B4'
      Button 4 = 'B5'
      Button 5 = 'B6'
      Button 6 = 'B7'
      Button 7 = 'B8'
      Button 8 = 'B9'
      Button 9 = 'B10'
      Button 10 = 'B11'


  A Microsoft SideWinder USB Joystick (two axes + throttle):

   Name = 'Microsoft SideWinder Joystick'
   Number of sticks = 2
      Stick 0 = 'Stick 1' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
      Stick 1 = 'Throttle' [ANALOGUE]
         Number of axes = 1
            Axis 0 = 'Throttle'
   Number of buttons = 8
      Button 0 = 'B1'
      Button 1 = 'B2'
      Button 2 = 'B3'
      Button 3 = 'B4'
      Button 4 = 'B5'
      Button 5 = 'B6'
      Button 6 = 'B7'
      Button 7 = 'B8'


  A Microsoft SideWinder USB controller (without any analog stick):

   Name = 'MicrosoftÂ® MicrosoftÂ® SideWinderÂ® Game Pad USB'
   Number of sticks = 1
      Stick 0 = 'Stick 1' [ANALOGUE]
         Number of axes = 2
            Axis 0 = 'X'
            Axis 1 = 'Y'
   Number of buttons = 10
      Button 0 = 'B1'
      Button 1 = 'B2'
      Button 2 = 'B3'
      Button 3 = 'B4'
      Button 4 = 'B5'
      Button 5 = 'B6'
      Button 6 = 'B7'
      Button 7 = 'B8'
      Button 8 = 'B9'
      Button 9 = 'B10'

 */

import allegro5.allegro;
import std.conv;
import std.exception;
import std.stdio;
import std.string;
import std.utf;


string StickFlags(int flags)
{
   switch (flags)
   {
      case ALLEGRO_JOYFLAGS.ALLEGRO_JOYFLAG_DIGITAL:
         return "DIGITAL";
      case ALLEGRO_JOYFLAGS.ALLEGRO_JOYFLAG_ANALOGUE:
         return "ANALOGUE";
      default:
         return "UNKNOWN";
   }
}

void PrintJoyButtonEvent(ref ALLEGRO_EVENT event)
{
   assert(event.type == ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN
          || event.type == ALLEGRO_EVENT_JOYSTICK_BUTTON_UP);

   writefln("%s, BUTTON %s %s",
            to!string(al_get_joystick_name(event.joystick.id)),
            to!string(al_get_joystick_button_name(event.joystick.id,
                                                  event.joystick.button)),
            event.type == ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN
            ? "DOWN"
            : "UP");
}


void PrintJoyAxisEvent(ref ALLEGRO_EVENT event)
{
   assert(event.type == ALLEGRO_EVENT_JOYSTICK_AXIS);

   writefln("%s, AXIS %s: %s",
            to!string(al_get_joystick_name(event.joystick.id)),
            to!string(al_get_joystick_axis_name(event.joystick.id,
                                                event.joystick.stick,
                                                event.joystick.axis)),
            event.joystick.pos);
}



void main()
{
	al_init();

   al_install_keyboard();
   al_install_mouse();
   al_install_joystick();

   writefln("al_get_num_joysticks() = %s\n\n", al_get_num_joysticks());

   foreach (joyID; 0..al_get_num_joysticks())
   {
      writefln("Joystick %s", joyID);

      auto js = al_get_joystick(joyID);
      enforce(js !is null);

      auto joyName = to!string(al_get_joystick_name(js));
      writefln("   Name = '%s'", joyName);

      immutable numSticks = al_get_joystick_num_sticks(js);
      writefln("   Number of sticks = %s", numSticks);
      foreach (stickID; 0 .. numSticks)
      {
         writefln("      Stick %s = '%s' [%s]", stickID,
                  to!string(al_get_joystick_stick_name(js, stickID)),
                  StickFlags(al_get_joystick_stick_flags(js, stickID)));

         immutable numAxes = al_get_joystick_num_axes(js, stickID);
         writefln("         Number of axes = %s", numAxes);

         foreach (axisID; 0..numAxes)
         {
            writefln("            Axis %s = '%s'", axisID,
                     to!string(al_get_joystick_axis_name(js, stickID, axisID)));
         }
      }


      immutable numButtons = al_get_joystick_num_buttons(js);
      writefln("   Number of buttons = %s", numButtons);
      foreach (butID; 0 .. numButtons)
      {
         writefln("      Button %s = '%s'", butID,
                  to!string(al_get_joystick_button_name(js, butID)));
      }


      writeln("\n");
   }



   ALLEGRO_DISPLAY* display = al_create_display(640, 480);

   ALLEGRO_EVENT_QUEUE* queue = al_create_event_queue();

   al_register_event_source(queue, al_get_display_event_source(display));
   al_register_event_source(queue, al_get_keyboard_event_source());
   al_register_event_source(queue, al_get_mouse_event_source());
   al_register_event_source(queue, al_get_joystick_event_source());


   bool exit = false;
   while (!exit)
   {
      ALLEGRO_EVENT event;
      while (al_get_next_event(queue, &event))
      {
         switch (event.type)
         {
            case ALLEGRO_EVENT_DISPLAY_CLOSE:
            {
               exit = true;
               break;
            }

            case ALLEGRO_EVENT_KEY_DOWN:
            {
               switch(event.keyboard.keycode)
               {
                  case ALLEGRO_KEY_ESCAPE:
                  {
                     exit = true;
                     break;
                  }
                  default:
               }
               break;
            }

            case ALLEGRO_EVENT_JOYSTICK_BUTTON_DOWN:
            {
               PrintJoyButtonEvent(event);
               break;
            }

            case ALLEGRO_EVENT_JOYSTICK_BUTTON_UP:
            {
               PrintJoyButtonEvent(event);
               break;
            }

            case ALLEGRO_EVENT_JOYSTICK_CONFIGURATION:
            {
               writefln("ALLEGRO_EVENT_JOYSTICK_CONFIGURATION");
               al_reconfigure_joysticks();
               break;
            }

            case ALLEGRO_EVENT_JOYSTICK_AXIS:
            {
               PrintJoyAxisEvent(event);
               break;
            }

            default:
            {
               // do nothing
               break;
            }
         }
      }

      al_clear_to_color(ALLEGRO_COLOR(0.0, 0.0, 0.0, 1));
      al_flip_display();
   }
}
