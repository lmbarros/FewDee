#+STARTUP: overview hidestars odd

* Bugs
*** =updater_canned_audio.example= freezes sometimes
    - [2013-07-03 Wed 20:53] I don't know exactly how to reproduce,
      but it seems to have something to do with varying the playing
      speed while the audio stream loops.
* Assorted TODOs
*** SpriteTemplate: add a data-driven description
    - [2013-07-12 Fri 21:50] Instead of manually calling many methods,
      read the specification of a =SpriteTemplate= from a string like
      this:
         string aSpriteConfig = `
            SIZE(64, 64)           # width, height
            BITMAP(bmp1, 32, 32)   # name in resmgr, corner x, corner y
            ANIMATION(
               punch,              # name
               0, 0.2              # bitmap index, time
               1, 0.3              # ditto
               0)                  # bitmap index (no time, lasts forever)`
*** SpriteTemplates: should them be managed by the ResourceManager?
    - [2013-07-12 Fri 21:54] It could make sense to make the resource
      manager manage the =SpriteTemplate=s.
*** Use a better building system
    - [2013-07-05 Fri 18:29] Right now, Scons probably has the best D
      support. A few days ago, someone said that was going to release
      much improved CMake support in the next couple of weeks.
*** Generate nice docs
    - [2013-07-05 Fri 18:39] CandyDoc?
*** Use =~this()= instead of =free()= to release "low-level resources"
    - If we use the destructor to free low-level resources, then we
      can just create =scope= resources when needed (specially in
      examples, where there is always that "will need to free
      resources manually" disclaimer).
    - [2013-07-02 Tue 18:52] I tried to make this change some days
      ago, but couldn't make it work. IIRC, the destructor (strangely)
      wasn't being called when =destroy()= was called on the resources
      (at least, that's what was seemingly happening with the
      =FakeResource= used in some unit tests.

*** Smarter sound initialization
    - If the sound cannot be initialized, the audio examples
      crash. There must be an easy and clean way for checking if the
      sound was not properly initialized (so that programs using
      FewDee could say "sorry, no sound, do you want to proceed
      anyway?"  (Looks like we are just throwing an exception now, so
      this part is easy). But then, if proceeding without sound
      support, no audio-related call should throw anything. All calls
      should simply be no-ops. This would be great, since the FewDee
      user wouldn't need to code worrying if audio is available or
      not. Graceful degration.

*** Virtual screen
     - Create a "virtual screen" with a given "virtual size". Draw
       everything relative to this virtual screen. Scale when
       drawing. But allow to use "real pixels", too. (This would be an
       option when creating (or re-creating, if possible) the
       display).

*** Use =al_run_allegro()=
     - Latest version of DAllegro includes a al_run_allegro() function
       that should be used instead of simply putting all the code
       directly on main() (for portability reasons). Check this out.

*** Replace fewdee.all with something more standard
     - Some people were using =fewdee/_.d=. But it seems that
       =fewdee/package.d= will be the standard.

*** Consider making the canned updaters more generic
    - [2013-07-02 Tue 21:59] C'mon... most of them have the same
      overall structure. Change the attribute, there we got a new
      updater. I am thinking about something like this:
      =addGenericUpdater!"opacity"()=. Maybe most of the others could
      be just aliases.
* TODOish notes concerning resources
   - Not all resources have a 1:1 mapping between files and the
     resources themselves. Case in point: one bitmap may contain
     several images which are intented to be used separately (a sprite
     sheet); furthermore, a single "sprite template" could reference
     many of these "sub bitmaps".
   - It would be possible to create some kind of "RAII proxy" to a
     resource manager. Adding resources to this "proxy" would add the
     resource to the resource manager. But the proxy remembers which
     resources it has added, so it cann free them when
     destroyed. (Would need to be 'scope'.) I don't know if this
     really necessary. Better wait until there is some real code using
     FewDee.
   - The resource manager would be, perhaps, the point where we chose
     between a real file system or an archive file
     system. Perhaps. Must think about this.

* Node Events TODOs
*** Z-order
    - Drawables have a "z" property; I can implement a picking visitor
      that takes it into account. Then, node_events should use this. Picking
      will pick Drawables only (and return a node path!).
*** Make any node registerable
    - OSGUIsh can work with any node; node_events should allow that, too:
      any node should be registerable; will need to walk up the picked
      node path until finding a registered node (or not).
*** Allow hierarchy of objects
    - Allow hierarchy of objects. (Will need to make AABBs much better
      on the way.)
* Sprite TODOs
*** Sprite constructor taking arbitrary number of file names
*** Sprite.contains() -> by transparency? Multiple containment policies?
  * Use subbitmaps?
    - For Sprite: there is a handy al_get_parent_bitmap() function;
      this would allow us to keep subbitmaps internally and return the
      "real" bitmap for sorting purposes. Anyway, must implement a
      benchmark to test how slower it is to render from different
      bitmaps versus from a single one versus sub-bitmaps.

* Abstracted Input TODOs
*** Add means to remove objects/handlers from AbstractedInput
*** Add more Command Triggers
    - Including one to recognize sequences of keys (both with
      time-constraints, like in fighting games, and without, like in
      IDKFA).
*** Make AbstractedInput more usable
    - Think about ways to make AbstractedInput more usable. Think
      about moving a character around. There is a set of low-level
      events (left key up, right_key_down...) that work together to
      generate the high-level commands (Think about diagonals;
      specially in a discrete grid; if "up" and "left" are pressed
      within a very short period, we want diagonal walking
      events. This is no one-to-one, as the current design
      assumes). And even then, the high-level commands could be
      implemented in different ways; do we have a "start walking
      right" command? Or we want to manage a "currently walking right"
      state? Or perhaps generate a sequence of "walked one step to the
      right" events?
   - Here's the result of some recent thinking about it: The problem
     is that the current design always maps events to commands, while
     sometimes we simply want to update some state that can be queried
     by the game at some specific moment. So, in addition to executing
     callbacks, AbstractedInput should be able to maintain some state
     updated as the user generates low-level events.
      - What kind of state? Boolean, integer, floating point, perhaps
        even "enum". A "direction" state, for 4- or 8-directions would
        be very useful, too.
      - We could call state changed callbacks (but I don't know if
        this would be useful).
      - Different strategies for state updates should be usable. For
        example, a float state could gradually go back to zero in the
        absence of an input signal, or keep the value "forever".

* Text TODOs
*** Add Text vertical alignment

* Scene Graph TODOs
*** Add multiple children with one call?
    - Group.addChild(): accept multiple children at a time?
      Technically, would have to be renamed addChildren()... don't
      know if is necessary in practice... must think about it.
*** Make AABBs work for rotated things
    - Like Sprites and SRTs. (I mean, the AABB is still axis-aligned,
      but it should change as the object is rotated...)
*** Consider making Sprite and Text "base classes"
    - They would become more like wrappers around Allegro objects),
      and create SpriteNode and TextNode classes for the scene graph.

* Optimization TODOs
*** Updated AABBs only when needed
    - Child nodes call a parents' method to tell to update their
      bounding boxes because their own bounding box changed. This way,
      we'll always have updated bounding boxes. [ initial
      implementation will always recompute the AABB; this faster
      method will be implemented if deemed necessary. ]
*** Drawables sharing a common Transform?
    - DrawingVisitor: Allow Drawables to share a common
      Transform. Then, sort by transform to spare a couple of calls to
      =al_use_transform()=. (Need to benchmark this; perhaps leave the
      sorting policy as something user-definable)
*** Sort by bitmap when drawing the scene graph
    - DrawingVisitor: Add a 'bitmap' property to Drawables. Then, sort
      by bitmap to avoid changing texture from draw to draw. BTW,
      remember to take subbitmaps into account. (Need to benchmark
      this; perhaps leave the sorting policy as something
      user-definable)

* Longer term TODOs
*** Hide Allegro completelly?
    - Consider hiding Allegro completely. Or perhaps allow multiple
      back-ends.

*** Find a decent way to represent input devices uniquely
    - Think about a decent way to represent input devices
      uniquely. Also, consider that joysticks can be plugged or
      unplugged at any time. This should be supported.
