GUIsh what about z-order? Drawables have a "z" property; I can
implement a picking visitor that takes it into account. Then, GUIsh
should use this. Picking will pick Drawables only (and return a node
path!).

OSGUIsh can work with any node; GUIsh should allow that, too: any node
should be registerable; will need to walk up the picked node path
until finding a registered node (or not).

GUIsh: allow hierarchy of objects. (Will need to make AABBs much
better on the way.)

Sprite constructor taking arbitrary number of file names.

Sprite.contains() -> by transparency? Multiple containment policies?

Add means to remove objects/handlers from GUIsh.

Create a "virtual screen" with a given "virtual size". Draw everything
relative to this virtual screen. Scale when drawing. But allow to use
"real pixels", too. (This would be an option when creating (or
re-creating, if possible) the display).

Create some standard updaters... like alpha interpolation, color
interpolation. Perhaps sprite updater. Mover. Easing would be nice for
everything...

Think about a sane way to do manage Allegro resources.

Add Text vertical alignment.

What if a state gets two events in the same "turn" and calls
pushState() in both of them? (Practical example: the player presses
"ESC" to get to the "in-game menu" state , and in the same "turn" he
is killed by a bullet, which triggers a transition to the "game over"
state.) Using Allegro events to manage the stack of states could be of
any help?

Make Sprite and Text dirty the AABB (instead of recomputing it) when
assigning to the coordinates.

For Sprite: there is a handy al_get_parent_bitmap() function; this
would allow us to keep subbitmaps internally and return the "real"
bitmap for sorting purposes. Anyway, must implement a benchmark to
test how slower it is to render from different bitmaps versus from a
single one versus sub-bitmaps.

Group.addChild(): accept multiple children at a time? Technically,
would have to be renamed addChildren()... don't know if is necessary
in practice... must think about it.

Latest version of DAllegro includes a al_run_allegro() function that
should be used instead of simply putting all the code directly on
main() (for portability reasons). Check this out.

Make Sprites' AABB work for rotated sprite. Same for SRT.

Consider making Sprite and Text "base classes" (they would become more
like wrappers around Allegro objects), and create SpriteNode and
TextNode classes for the scene graph.


 Optimization
--------------

Child nodes call a parents' method to tell to update their bounding
boxes because their own bounding box changed. This way, we'll always
have updated bounding boxes. [ initial implementation will always
recompute the AABB; this faster method will be implemented if deemed
necessary. ]

DrawingVisitor: Allow Drawables to share a common Transform. Then,
sort by transform to spare a couple of calls to
al_use_transform(). (Need to benchmark this; perhaps leave the sorting
policy as something user-definable)

DrawingVisitor: Add a 'bitmap' property to Drawables. Then, sort by
bitmap to avoid changing texture from draw to draw. BTW, remember to
take subbitmaps into account. (Need to benchmark this; perhaps leave
the sorting policy as something user-definable)
